{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/davidkerns/Desktop\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "path = os.getcwd()\n",
    "\n",
    "print(path)\n",
    "# /Users/mbp/Documents/my-project/python-snippets/notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gspread\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import datasets, linear_model\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import statsmodels.api as sm\n",
    "from scipy import stats\n",
    "\n",
    "###Pull Google Sheet into dataframe\n",
    "scope = ['https://spreadsheets.google.com/feeds',\n",
    "         'https://www.googleapis.com/auth/drive']\n",
    "\n",
    "credentials = ServiceAccountCredentials.from_json_keyfile_name(\n",
    "         'crewlab-dataprototype-3-77b10d80c47e.json', scope) # Your json file here\n",
    "\n",
    "gc = gspread.authorize(credentials)\n",
    "\n",
    "wks = gc.open(\"Raw for Python Test\").sheet1\n",
    "\n",
    "data = wks.get_all_values()\n",
    "headers = data.pop(0)\n",
    "\n",
    "###Drop first column, create a column with the average excluding column 1\n",
    "\n",
    "df_raw = pd.DataFrame(data, columns=headers)\n",
    "df= df_raw.drop('Stroke', axis = 1)\n",
    "\n",
    "\n",
    "### Create function to calculate excluded mean and then append col\n",
    "def exclude_var_append_col(df, index_to_x):\n",
    "    var_name = df.columns[index_to_x]\n",
    "    new_var_name = \"avg_exclude_\"+ var_name\n",
    "    df[var_name] = pd.to_numeric(df[var_name], downcast=\"float\")\n",
    "    df[new_var_name] = df.drop(var_name, axis = 1).iloc[:,1:].mean(axis=1)\n",
    "    return(df)\n",
    "\n",
    "### Iterate over all columns in df\n",
    "colindex = list(range(8))\n",
    "for i in colindex:\n",
    "    exclude_var_append_col(df, i)\n",
    "\n",
    "df.head()\n",
    "#Problem: means are returning like 2.08x10^15, when they should be roughly 80-120\n",
    "\n",
    "#This dataset contains the a list of rowing athlete workout metrics, which were \n",
    "#uploaded by a university rowing program coach to google drive via a google form. \n",
    "#I call the google drive API to pull these off of google sheets into a dataframe,\n",
    "#effectively running google sheets as as server. It could be used to measure \n",
    "#the effect of each athlete's rowing on the team as a whole excluding that athlete,\n",
    "#as that code above begins to hint at by calculating averages of combinations of \n",
    "#7 athletes (excluding one).
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
